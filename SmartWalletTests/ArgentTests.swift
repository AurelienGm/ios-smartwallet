//
//  ArgentTests.swift
//  SmartWalletTests
//
//  Created by Fred on 14/09/2020.
//  Copyright Â© 2020 Frederic DE MATOS. All rights reserved.
//

import XCTest
import web3
import BigInt

@testable import Moonkey

class ArgentTests: XCTestCase {

    func testEncodeCallContract() {
        let rpcClient = EthereumClient(url: URL(string: "https://www.rpc.url")!)
        let argent = Argent(address: "0xe37BBBdd7364D82d46f6C346AA8977e27e9E374B", rpc: rpcClient)
            
        
        let expectedData = "0xfd6ac309000000000000000000000000e37bbbdd7364d82d46f6c346aa8977e27e9e374b000000000000000000000000f845b2501a69ef480ac577b99e96796c2b6ae88e000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000"
        
        
        let to = "0xf845b2501A69eF480aC577b99e96796c2B6AE88E"
        let value = BigUInt("10000000000000000")
        let data = Data()
        
        let contractCallData = argent.encodeCallContract(to: EthereumAddress(to), value: value, data: data)
        XCTAssertEqual(contractCallData.hexValue, expectedData)
        
        let expectedHash = "0xf85809116cc214cfd6a93b9cbc471d8266221088793b668df749bdd0f6e5ac48"
        
        let nonce = "0x000000000000000000000000000000000000000000008304805d387850186f16"
        
        let hash = argent.hashMessage(data: contractCallData, nonce: nonce)
        XCTAssertEqual(hash.hexValue, expectedHash)
        
        let expectedExecuteData = "0xaacaaf88000000000000000000000000e37bbbdd7364d82d46f6c346aa8977e27e9e374b00000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000000000000000000000008304805d387850186f1600000000000000000000000000000000000000000000000000000000000001a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a4fd6ac309000000000000000000000000e37bbbdd7364d82d46f6c346aa8977e27e9e374b000000000000000000000000f845b2501a69ef480ac577b99e96796c2b6ae88e000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000000000000000800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041bd4624b87101562bf79abefbcf30abc9f713e80a722ed345199087cbfdc0861f57b23ff5b210849055772dc70e9f55f9434b7d1fa0e211be251d5b2dd42f55531b00000000000000000000000000000000000000000000000000000000000000"
        
           
        let expectedSignature = "0xbd4624b87101562bf79abefbcf30abc9f713e80a722ed345199087cbfdc0861f57b23ff5b210849055772dc70e9f55f9434b7d1fa0e211be251d5b2dd42f55531b"
        
        let executeData = argent.encodeExec(data: contractCallData, signature: Data(hex: expectedSignature), nonce: nonce)
        XCTAssertEqual(executeData.hexValue, expectedExecuteData)
    }
    

}
